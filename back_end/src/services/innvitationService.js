const { pickUser } = require("../utils/formatter")
const boardModel = require("~/model/boardModel")
const userModel = require("~/model/userModel")
const innvitationModel = require("~/model/innvitationModel")
const ApiError = require("~/utils/ApiError")
const { StatusCodes } = require("http-status-codes")
const {
  INVITATION_TYPES,
  BOARD_INVITATION_STATUS
} = require("~/utils/constants")
module.exports = {
  createNewBoardInvitation: async (reqBody, inviterId) => {
    try {
      // Ng∆∞·ªùi ƒëi m·ªùi ch√≠nh l√† req
      const inviter = await userModel.findOneById(inviterId)
      console.log("üöÄ ~ createNewBoardInvitation: ~ inviter:", inviter)
      // ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi l√† l·∫•y t·ª´ FE
      const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail)
      console.log("üöÄ ~ createNewBoardInvitation: ~ invitee:", invitee)
      // L·∫•y board ƒë∆∞·ª£c m·ªùi v√†o
      const board = await boardModel.findOneById(reqBody.boardId)
      console.log("üöÄ ~ createNewBoardInvitation: ~ board:", board)
      // kh√¥ng t·ªìn t·∫°i 1 trong 3 b·ªè qua
      if (!invitee || !board || !inviter) {
        throw new ApiError(
          StatusCodes.NOT_FOUND,
          "Inviter, Invitee or board not found!"
        )
      }
      const newInvitationData = {
        inviterId,
        inviteeId: invitee._id.toString(),
        type: INVITATION_TYPES.BOARD_INVIATION,
        boardInvitation: {
          boardId: board._id.toString(),
          status: BOARD_INVITATION_STATUS.PENDING // tr·∫°ng th√°i ban ƒë·∫ßu
        }
      }

      const createdInvitation = await innvitationModel.createNewBoardInvitation(
        newInvitationData
      )
      const getInvitation = await innvitationModel.findOneById(
        createdInvitation.insertedId
      )
      const resInvitation = {
        ...getInvitation,
        board,
        inviter: pickUser(inviter),
        invitee: pickUser(invitee)
      }
      return resInvitation
      // Tr·ª´ info board invitation m·ªõi t·∫°o th√¨ tr·∫£ v·ªÅ tho·∫£i m√°i
    } catch (e) {
      throw e
    }
  },
  getInvitations: async (userId) => {
    try {
      const getInvitations = await innvitationModel.findByUser(userId)
      return getInvitations
    } catch (e) {
      throw e
    }
  },
  updateBoardInvitation: async (userId, invitationId, status) => {
    try {
      //- T√¨m b·∫£n ghi invitation trong model
      const getInvitation = await innvitationModel.findOneById(invitationId)
      if (!getInvitation)
        throw new ApiError(StatusCodes.NOT_FOUND, "Invitation not found!")

      //- Sau khi c√≥ Invitation r·ªìi th√¨ l·∫•y full info c·ªßa board
      const boardId = getInvitation.boardInvitation.boardId
      const getBoard = await boardModel.findOneById(boardId)
      if (!getBoard)
        throw new ApiError(StatusCodes.NOT_FOUND, "Board not found!")

      //- Ki·ªÉm tra xem n·∫øu status l√† ACCRpTED join board m√† c√°i th·∫±ng user (invitee) ƒë√£
      // l√† owner ho·∫∑c member c·ªßa board r·ªìi th√¨ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói lu√¥n
      //- Note: 2 m·∫£ng memberIds v√† ownerIds c·ªßa board n√≥ ƒëang l√† ki·ªÉu ObjectID n√™n cho n√≥ h·∫øt v·ªÅ String ƒë·ªÉ check
      const boardOwnerAndMembers = [...getBoard.ownerIds, ...getBoard.memberIds]
      if (
        status === BOARD_INVITATION_STATUS.ACCEPTED &&
        boardOwnerAndMembers.includes(userId)
      ) {
        throw new ApiError(
          StatusCodes.NOT_ACCEPTABLE,
          "You are already a member of this board!"
        )
      }
      const updateData = {
        boardInvitation: {
          ...getInvitation.boardInvitation,
          status
        }
      }
      // T·∫°o d·ªØ li·ªáu ƒë·ªÉ update b·∫£n ghi Invitation
    } catch (e) {
      throw e
    }
  }
}
