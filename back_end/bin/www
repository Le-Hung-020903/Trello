#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../src/server");
var debug = require("debug")("back-end:server");
var http = require("http");
const exitHook = require("async-exit-hook");
const { CONNECT_DB, CLOSE_DB } = require("../src/config/mongodb");
const { APP_PORT, APP_HOST } = require("../src/config/environment")

let isServerStarted = false; // Cờ để kiểm tra trạng thái khởi động server

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(APP_PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Function to start the server
 */
async function start_server() {
  if (!isServerStarted) {
    await CONNECT_DB();
    isServerStarted = true;
  }
  server.listen(port);
}

start_server();
server.on("error", onError);
server.on("listening", onListening);

exitHook(() => {
  CLOSE_DB();
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
