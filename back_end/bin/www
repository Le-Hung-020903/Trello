#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../src/server")
var debug = require("debug")("back-end:server")
var http = require("http")
const socketIO = require("socket.io")
const exitHook = require("async-exit-hook")
const { CONNECT_DB, CLOSE_DB } = require("../src/config/mongodb")
const { APP_PORT, APP_HOST } = require("../src/config/environment")
const { corsOptions } = require("../src/config/cors")
const env = require("../src/config/environment")
const { inviteUserToBoard } = require("../src/sockets/inviteUserToBoardSocket")
let isServerStarted = false // Cờ để kiểm tra trạng thái khởi động server

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(APP_PORT || "3000")
app.set("port", port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

// Tích hợp Socket.IO vào HTTP server và cors
const io = socketIO(server, { cors: corsOptions })
io.on("connection", (socket) => {
  // console.log("A user connected: ", socket.id)
  // Lắng nghe sự kiện mà client emit lên: FE_USER_INVITED_TO_BOARD
  inviteUserToBoard(socket)
})

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Function to start the server
 */
// const server = http.createServer(socketIO)
async function start_server() {
  if (!isServerStarted) {
    await CONNECT_DB()
    isServerStarted = true
  }
  if (env.BUILD_MODE === "production") {
    // Môi trường Production (cụ thể là render)
    server.listen(process.env.PORT, () => {
      console.log(
        `Production server is running successfully at port: ${process.env.PORT}`
      )
    })
  } else {
    // Môi trường local dev
    server.listen(port, APP_HOST, () => {
      console.log(`Local dev server is running successfully at port: ${port}`)
    })
  }
}

start_server()
server.on("error", onError)
server.on("listening", onListening)

exitHook(() => {
  CLOSE_DB()
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
}
